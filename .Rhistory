return (sum(result_normal<alpha)/M)
}
normal_Test(100, 100, 0.05)
df_t <- df_t %>%
mutate(normal_reject = NA)
for (i in 1:nrow(df_t)){
df_t$normal_reject[i] <- normal_Test(df_t$M[i], df_t$N[i], 0.05)
}
#Plotting graph
df_t %>%
ggplot(aes(x = N)) +
geom_line(aes(y = share_reject,color = "Tweedie distribution")) +
geom_line(aes(y = normal_reject,color = "Normal distribution")) +
ylab("Percentage rejections of the 0 hypothesis in t-test with alpha = 0.05")+
labs(colour = "Distributions")+
theme_bw()
#The normal distribution is much closer to 5% at smaller N
simNormalTest <-
function(N){
sampleNormal <- rnorm(N,10000,1)
return(t.test(sampleNormal, mu = 10000)$p.value)
}
simNormalTest(100)
normal_Test <- function(M, N, alpha) {
# Replicate the function M times
result_normal <- replicate(M, simNormalTest(N))
return (sum(result_normal<alpha)/M)
}
normal_Test(100, 100, 0.05)
df_t <- df_t %>%
mutate(normal_reject = NA)
for (i in 1:nrow(df_t)){
df_t$normal_reject[i] <- normal_Test(df_t$M[i], df_t$N[i], 0.05)
}
#Plotting graph
df_t %>%
ggplot(aes(x = N)) +
geom_line(aes(y = share_reject,color = "Tweedie distribution")) +
geom_line(aes(y = normal_reject,color = "Normal distribution")) +
ylab("Percentage rejections of the 0 hypothesis in t-test with alpha = 0.05")+
labs(colour = "Distributions")+
theme_bw()
#The normal distribution is much closer to 5% at smaller N
simNormalTest <-
function(N){
sampleNormal <- rnorm(N,10000,1)
return(t.test(sampleNormal, mu = 10000)$p.value)
}
simNormalTest(100)
normal_Test <- function(M, N, alpha) {
# Replicate the function M times
result_normal <- replicate(M, simNormalTest(N))
return (sum(result_normal<alpha)/M)
}
normal_Test(100, 100, 0.05)
df_t <- df_t %>%
mutate(normal_reject = NA)
for (i in 1:nrow(df_t)){
df_t$normal_reject[i] <- normal_Test(df_t$M[i], df_t$N[i], 0.05)
}
#Plotting graph
df_t %>%
ggplot(aes(x = N)) +
geom_line(aes(y = share_reject,color = "Tweedie distribution")) +
geom_line(aes(y = normal_reject,color = "Normal distribution")) +
ylab("Percentage rejections of the 0 hypothesis in t-test with alpha = 0.05")+
labs(colour = "Distributions")+
theme_bw()
#The normal distribution is much closer to 5% at smaller N
simNormalTest <-
function(N){
sampleNormal <- rnorm(N,10000,1)
return(t.test(sampleNormal, mu = 10000)$p.value)
}
simNormalTest(100)
normal_Test <- function(M, N, alpha) {
# Replicate the function M times
result_normal <- replicate(M, simNormalTest(N))
return (sum(result_normal<alpha)/M)
}
normal_Test(100, 100, 0.05)
df_t <- df_t %>%
mutate(normal_reject = NA)
for (i in 1:nrow(df_t)){
df_t$normal_reject[i] <- normal_Test(df_t$M[i], df_t$N[i], 0.05)
}
#Plotting graph
df_t %>%
ggplot(aes(x = N)) +
geom_line(aes(y = share_reject,color = "Tweedie distribution")) +
geom_line(aes(y = normal_reject,color = "Normal distribution")) +
ylab("Percentage rejections of the 0 hypothesis in t-test with alpha = 0.05")+
labs(colour = "Distributions")+
theme_bw()
#The normal distribution is much closer to 5% at smaller N
getwd()
library(httr)
library(jsonlite)
library(ggplot2)
library(DescTools)
library(tidyverse)
library(magrittr)
library(rlang)
library(lubridate)
library(anytime)
library(readr)
library(yaml)
library(glue)
vol_qry <- function(id, from, to) {
query <- glue('
{
trafficData(trafficRegistrationPointId: "{id}") {
volume {
byHour(from: "{from}", to: "{to}") {
edges {
node {
from
to
total {
volumeNumbers {
volume
}
}
}
}
}
}
}
}
',
id = id, from = from, to = to,
.open = "\"{", .close = "}\"" # use "{ and }" as delimiters to avoid conflict with GraphQL syntax
)
return(query)
}
# Example
id <- "97411V72313"
from <- "2022-05-01T06:55:47Z"
to <- "2022-05-08T06:55:47Z"
print(vol_qry(id, from, to))
GQL(
vol_qry(
id=stations_metadata_df$id[1],
from=to_iso8601(stations_metadata_df$latestData[1],-4),
to=to_iso8601(stations_metadata_df$latestData[1],0)
),
.url = configs$vegvesen_url
)
library(httr)
library(jsonlite)
library(ggplot2)
library(DescTools)
library(tidyverse)
library(magrittr)
library(rlang)
library(lubridate)
library(anytime)
library(readr)
library(yaml)
library(glue)
vol_qry <- function(id, from, to) {
query <- glue('
{
trafficData(trafficRegistrationPointId: "{id}") {
volume {
byHour(from: "{from}", to: "{to}") {
edges {
node {
from
to
total {
volumeNumbers {
volume
}
}
}
}
}
}
}
}
',
id = id, from = from, to = to,
.open = "\"{", .close = "}\"" # use "{ and }" as delimiters to avoid conflict with GraphQL syntax
)
return(query)
}
GQL(
vol_qry(
id=stations_metadata_df$id[1],
from=to_iso8601(stations_metadata_df$latestData[1],-4),
to=to_iso8601(stations_metadata_df$latestData[1],0)
),
.url = configs$vegvesen_url
)
configs <-
read_yaml("vegvesen_configs.yml")
getwd()
setwd("C:/Users/halvo/OneDrive - Norges Handelshøyskole/BAN400/Assignments/Assignment6/iterations-halvorfemdal")
library(httr)
library(jsonlite)
library(ggplot2)
library(DescTools)
library(tidyverse)
library(magrittr)
library(rlang)
library(lubridate)
library(anytime)
library(readr)
library(yaml)
library(glue)
vol_qry <- function(id, from, to) {
query <- glue('
{
trafficData(trafficRegistrationPointId: "{id}") {
volume {
byHour(from: "{from}", to: "{to}") {
edges {
node {
from
to
total {
volumeNumbers {
volume
}
}
}
}
}
}
}
}
',
id = id, from = from, to = to,
.open = "\"{", .close = "}\"" # use "{ and }" as delimiters to avoid conflict with GraphQL syntax
)
return(query)
}
GQL(
vol_qry(
id=stations_metadata_df$id[1],
from=to_iso8601(stations_metadata_df$latestData[1],-4),
to=to_iso8601(stations_metadata_df$latestData[1],0)
),
.url = configs$vegvesen_url
)
stations_metadata_df$id[1]
GQL(
vol_qry(
id=stations_metadata_df$id[1],
from=to_iso8601(stations_metadata_df$latestData[1],-4),
to=to_iso8601(stations_metadata_df$latestData[1],0)
),
.url = configs$vegvesen_url
)
library(httr)
library(jsonlite)
library(ggplot2)
library(DescTools)
library(tidyverse)
library(magrittr)
library(rlang)
library(lubridate)
library(anytime)
library(readr)
library(yaml)
#### 1: Beginning of script
# Load function for posting GQL-queries and retrieving data:
source("functions/GQL_function.r")
# The URL we will use is stored below:
configs <-
read_yaml("vegvesen_configs.yml")
gql_metadata_qry <- read_file("gql-queries/station_metadata.gql")
# Let's try submitting the query:
stations_metadata <-
GQL(
query=gql_metadata_qry,
.url = configs$vegvesen_url
)
source("functions/data_transformations.r")
stations_metadata_df <-
stations_metadata %>%
transform_metadata_to_df(.)
#### 3: Testing metadata
source("functions/data_tests.r")
test_stations_metadata(stations_metadata_df)
library(httr)
library(jsonlite)
library(ggplot2)
library(DescTools)
library(tidyverse)
library(magrittr)
library(rlang)
library(lubridate)
library(anytime)
library(readr)
library(yaml)
library(glue)
vol_qry <- function(id, from, to) {
query <- glue('
{
trafficData(trafficRegistrationPointId: "{id}") {
volume {
byHour(from: "{from}", to: "{to}") {
edges {
node {
from
to
total {
volumeNumbers {
volume
}
}
}
}
}
}
}
}
',
id = id, from = from, to = to,
.open = "\"{", .close = "}\"" # use "{ and }" as delimiters to avoid conflict with GraphQL syntax
)
return(query)
}
GQL(
vol_qry(
id=stations_metadata_df$id[1],
from=to_iso8601(stations_metadata_df$latestData[1],-4),
to=to_iso8601(stations_metadata_df$latestData[1],0)
),
.url = configs$vegvesen_url
)
source("gql-queries/vol_qry.r")
GQL(
vol_qry(
id=stations_metadata_df$id[1],
from=to_iso8601(stations_metadata_df$latestData[1],-4),
to=to_iso8601(stations_metadata_df$latestData[1],0)
),
.url = configs$vegvesen_url
)
stations_metadata_df %>%
filter(latestData > Sys.Date() - days(7)) %>%
sample_n(1) %$%
vol_qry(
id = id,
from = to_iso8601(latestData, -4),
to = to_iso8601(latestData, 0)
)
stations_metadata_df %>%
filter(latestData > Sys.Date() - days(7)) %>%
sample_n(1) %$%
vol_qry(
id = id,
from = to_iso8601(latestData, -4),
to = to_iso8601(latestData, 0)
) %>%
GQL(., .url = configs$vegvesen_url) %>%
transform_volumes() %>%
ggplot(aes(x=from, y=volume)) +
geom_line() +
theme_classic()
GQL(
vol_qry(
id=stations_metadata_df$id[1],
from=to_iso8601(stations_metadata_df$latestData[1],-4),
to=to_iso8601(stations_metadata_df$latestData[1],0)
),
.url = configs$vegvesen_url
)
stations_metadata_df$id[1]
GQL(
vol_qry(
id=stations_metadata_df$id[1],
from=to_iso8601(stations_metadata_df$latestData[1],-4),
to=to_iso8601(stations_metadata_df$latestData[1],0)
),
.url = configs$vegvesen_url
)
GQL(
vol_qry(
id=stations_metadata_df$id[1],
from=to_iso8601(stations_metadata_df$latestData[1],-4),
to=to_iso8601(stations_metadata_df$latestData[1],0)
),
.url = configs$vegvesen_url
)
GQL
GQL(
vol_qry(
id=stations_metadata_df$id[1],
from=to_iso8601(stations_metadata_df$latestData[1],-4),
to=to_iso8601(stations_metadata_df$latestData[1],0)
),
.url = configs$vegvesen_url
)
print(
vol_qry(
id=stations_metadata_df$id[1],
from=to_iso8601(stations_metadata_df$latestData[1],-4),
to=to_iso8601(stations_metadata_df$latestData[1],0)
),
.url = configs$vegvesen_url
)
stations_metadata_df %>%
filter(latestData > Sys.Date() - days(7)) %>%
sample_n(1) %$%
vol_qry(
id = id,
from = to_iso8601(latestData, -4),
to = to_iso8601(latestData, 0)
) %>%
GQL(., .url = configs$vegvesen_url)
source("gql-queries/vol_qry.r")
stations_metadata_df %>%
filter(latestData > Sys.Date() - days(7)) %>%
sample_n(1)
source("gql-queries/vol_qry.r")
stations_metadata_df %>%
filter(latestData > Sys.Date() - days(7)) %>%
sample_n(1) %$%
vol_qry(
id = id,
from = to_iso8601(latestData, -4),
to = to_iso8601(latestData, 0)
)
source("gql-queries/vol_qry.r")
stations_metadata_df %>%
filter(latestData > Sys.Date() - days(7)) %>%
sample_n(1) %$%
vol_qry(
id = id,
from = to_iso8601(latestData, -4),
to = to_iso8601(latestData, 0)
) %>%
GQL(., .url = configs$vegvesen_url)
source("C:/Users/halvo/OneDrive - Norges Handelshøyskole/BAN400/Assignments/Assignment6/iterations-halvorfemdal/iterations.r", echo=TRUE)
source("gql-queries/vol_qry.r")
stations_metadata_df %>%
filter(latestData > Sys.Date() - days(7)) %>%
sample_n(1) %$%
vol_qry(
id = id,
from = to_iso8601(latestData, -4),
to = to_iso8601(latestData, 0)
) %>%
GQL(., .url = configs$vegvesen_url)
source("gql-queries/vol_qry.r")
stations_metadata_df %>%
filter(latestData > Sys.Date() - days(7)) %>%
sample_n(1) %$%
vol_qry(
id = id,
from = to_iso8601(latestData, -4),
to = to_iso8601(latestData, 0)
)
source("gql-queries/vol_qry.r")
stations_metadata_df %>%
filter(latestData > Sys.Date() - days(7)) %>%
sample_n(1) %$%
vol_qry(
id = id,
from = to_iso8601(latestData, -4),
to = to_iso8601(latestData, 0)
) %>%
GQL(., .url = configs$vegvesen_url)
print(vol_qry(
id=stations_metadata_df$id[1],
from=to_iso8601(stations_metadata_df$latestData[1],-4),
to=to_iso8601(stations_metadata_df$latestData[1],0)
)
print(vol_qry(
print(vol_qry(
id=stations_metadata_df$id[1],
from=to_iso8601(stations_metadata_df$latestData[1],-4),
to=to_iso8601(stations_metadata_df$latestData[1],0)))
vol_qry <- function(id, from, to) {
query <- glue('
{
trafficData(trafficRegistrationPointId: "{id}") {
volume {
byHour(from: "{from}", to: "{to}") {
edges {
node {
from
to
total {
volumeNumbers {
volume
}
}
}
}
}
}
}
}
',
id = id, from = from, to = to,
.open = "{", .close = "}"
)
return(query)
}
print(vol_qry(
id=stations_metadata_df$id[1],
from=to_iso8601(stations_metadata_df$latestData[1],-4),
to=to_iso8601(stations_metadata_df$latestData[1],0)))
print(vol_qry(
id=stations_metadata_df$id[1],
from=to_iso8601(stations_metadata_df$latestData[1],-4),
to=to_iso8601(stations_metadata_df$latestData[1],0)))
